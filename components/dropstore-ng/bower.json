{
  "name": "dropstore-ng",
  "version": "1.0.4",
  "main": "dropstore-ng.js",
  "ignore": [
    "example",
    ".idea",
    ".git"
  ],
  "dependencies": {},
  "devDependencies": {},
  "gitHead": "1c5f3e0f67414027a95f7be95bf80dde3ce18fb1",
  "readme": "dropstore-ng\r\n============\r\n\r\ndropstore-ng is a set of [AngularJS](http://angularjs.org/) bindings for [Dropbox Datastore](https://www.dropbox.com/developers/datastore).\r\nWith Drobox Datastore, AngularJS and dropstore-ng you can easily create completely serverless client-side applications with syncing across multiple devices !\r\n\r\nThe bindings wrap the first three tiers (Client, DatastoreManager, Datastore) of the Dropbox Datastore API within\r\n[Angular Promises](http://docs.angularjs.org/api/ng.$q). This is because only the first three tiers use callbacks and because\r\n it creates a easy to follow chain of async function calls rather than the hell usually associated with callback heavy libraries.\r\n The Dropbox Datastore API is also wrapped with promises to create a\r\nsimple way to ensure that the AngularJS scope is updated properly. dropstore-ng also provides AngularJS publish/subscribe functionality\r\nallowing applications to listen for local and/or remote updates to the datastores.\r\n\r\n\r\n### Live Demo: <a target=\"_blank\" href=\"https://dropstore-ng.site44.com/\">Real-time TODO app</a>.\r\n\r\nUsage\r\n-----\r\nInclude [dropbox javascript sdk](https://www.dropbox.com/developers/datastore/sdks/js), angular.js and dropstore-ng.js in your application.\r\n\r\n```html\r\n<script src=\"https://www.dropbox.com/static/api/1/dropbox-datastores-0.1.0-b2.js\" type=\"text/javascript\"></script>\r\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js\"></script>\r\n<script src=\"dropstore-ng.js\"></script>\r\n```\r\n\r\nAdd the module `dropstore-ng` as a dependency to your app module:\r\n\r\n```js\r\nvar myapp = angular.module('myapp', ['dropstore-ng']);\r\n```\r\n\r\nQuick Start\r\n----------------------------------\r\n\r\nSet `dropstoreClient` as a service dependency in your controller:\r\n\r\n```js\r\nmyapp.controller('MyCtrl', ['$scope', 'dropstoreClient',\r\n  function MyCtrl($scope, dropstoreClient) {\r\n    ...\r\n  }\r\n]);\r\n```\r\n\r\nCreate an `authentication` handler that will be called when the controller first loads.\r\ndrobstore-ng just wraps the standard [authenticate](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.authenticate)\r\n method inside of a promise. The success callback of the authenticate method is a modified [datastoreManager](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager) object.\r\n\r\n```js\r\n$scope.tasks = [];\r\ndropstoreClient.create({key: 'YOUR_APP_KEY_HERE'})\r\n    .authenticate({interactive: true})\r\n    .then(function(datastoreManager){\r\n        console.log('completed authentication');\r\n        return datastoreManager.openDefaultDatastore();\r\n    });\r\n```\r\n\r\nthe datastoreManager and the datastore objects has been modified such that their instance methods are wrapped in promises:\r\n\r\n```js\r\n    ...\r\n    .then(function(datastore){\r\n        var taskTable = datastore.getTable('tasks');\r\n        $scope.tasks =  taskTable.query();\r\n    })\r\n```\r\n\r\nYou can display the datastore report items using the standard Dropbox Datastore API commands:\r\n\r\n```html\r\n<ul>\r\n    <li ng-repeat=\"task in tasks\">\r\n       {{task.get('taskname')}}\r\n    </li>\r\n</ul>\r\n```\r\nSee the source for the\r\n[controller behind the todo app](http://analogj.github.com/dropstore-ng/example/todo/controllers.js)\r\nfor a working example including syncing changes.\r\n\r\nDropbox Datastore API and Promises\r\n-----------\r\nAs I stated above, only the first three tiers of the Dropbox Datastore API are wrapped in AngularJS Promises.\r\nOnly methods that make use of callbacks are wrapped in promises, all other instance methods are passed through like usual.\r\nI've included the full documentation on the modified instance methods, and how to use them, below:\r\n\r\n###Dropbox Client\r\n-----------\r\nAll unmentioned instance methods for the standard Dropbox.Client are transparently aliased. Only wrapped/changed functionality  methods are documented here. Refer to\r\n[Dropbox SDK Documentation for Dropbox.Client](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client) for more information.\r\n\r\n####dropstoreClient.create\r\nalias for [Dropbox.client.constructor](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client)\r\n\r\n####dropstoreClient.authenticate\r\n[Dropbox.Client.authenticate](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.authenticate) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success, a [dropstoreDatastoreManager](#dropbox-datastore-datastoremanager) object is returned, which wraps the [Dropbox.Datastore.DatastoreManager](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager)\r\n```js\r\n    dropstoreClient.authenticate({interactive: true})\r\n        .then(function(datastoreManager){\r\n            console.log('auth successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('auth failure');\r\n            ..\r\n        };\r\n```\r\n\r\n####dropstoreClient.getDatastoreManager\r\n[Dropbox.Client.getDatastoreManager](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.getDatastoreManager) has been modified to return a [dropstoreDatastoreManager](#dropbox-datastore-datastoremanager), which wraps the standard [Dropbox.Datastore.DatastoreManager](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager) in promises.\r\n\r\n####dropstoreClient.signOut\r\n[Dropbox.Client.signOut](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.signOut) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success nothing is returned, however failures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n```js\r\n    dropstoreClient.signOut({mustInvalidate: true})\r\n        .then(function(){\r\n            console.log('signout successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('signout failure');\r\n            ..\r\n        };\r\n```\r\n\r\n####dropstoreClient.getAccountInfo\r\n[Dropbox.Client.getAccountInfo](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client.getAccountInfo) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success the Dropbox.AccountInfo object will be passed through and failures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n```js\r\n    dropstoreClient.getAccountInfo({httpCache: true})\r\n        .then(function(accountInfo){\r\n            console.log('getAccountIno successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('getAccountInfo failure');\r\n            ..\r\n        };\r\n```\r\n\r\n####Other methods\r\n[Dropbox.Client](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client) has many methods. Currently only the following methods are transparently aliased to the Client.\r\n`dropstoreClient.dropboxUid`, `dropstoreClient.credentials`, `dropstoreClient.isAuthenticated`, `dropstoreClient.getUserInfo`\r\n\r\n###Dropbox Datastore DatastoreManager\r\n-----------\r\nAll unmentioned instance methods for the standard Dropbox.Datastore.DatastoreManager are transparently aliased. Only wrapped/changed functionality  methods are documented here. Refer to\r\n[Dropbox SDK Documentation for Dropbox.Datastore.DatastoreManager](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager) for more information.\r\n\r\n\r\n####dropstoreDatastoreManager.openDefaultDatastore\r\n[Dropbox.Datastore.DatastoreManager.openDefaultDatastore](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager.openDefaultDatastore) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success, a [dropstoreDatastore](#dropbox-datastore) object is returned, which wraps the [Dropbox.Datastore](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore).\r\nFailures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n```js\r\n    dropstoreDatastoreManager.openDefaultDatastore()\r\n        .then(function(datastore){\r\n            console.log('openDefaultDatastore successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('openDefaultDatastore failure');\r\n            ..\r\n        };\r\n```\r\n####dropstoreDatastoreManager.openDatastore dropstoreDatastoreManager.createDatastore\r\n`openDatastore` and `createDatastore` follow the pattern listed above.\r\nOn success, a [dropstoreDatastore](#dropbox-datastore) object is returned, which wraps the [Dropbox.Datastore](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore).\r\nFailures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n\r\n####dropstoreDatastoreManager.listDatastoreIds\r\n[Dropbox.Datastore.DatastoreManager.listDatastoreIds](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager.listDatastoreIds) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success, a `Array<String>` is returned, which lists the IDs of all accessible datastores.\r\nFailures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n```js\r\n    dropstoreDatastoreManager.listDatastoreIds()\r\n        .then(function(datastore){\r\n            console.log('listDatastoreIds successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('listDatastoreIds failure');\r\n            ..\r\n        };\r\n```\r\n\r\n####dropstoreDatastoreManager.deleteDatastore\r\n[Dropbox.Datastore.DatastoreManager.deleteDatastore](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore.DatastoreManager.deleteDatastore) has been wrapped in a promise, such that the callback parameter is not necessary.\r\nOn success nothing is returned\r\nFailures will passthrough a [Dropbox.ApiError](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.ApiError) object\r\n```js\r\n    dropstoreDatastoreManager.deleteDatastore()\r\n        .then(function(){\r\n            console.log('deleteDatastore successful');\r\n            ..\r\n        }, function(error){\r\n            console.log('deleteDatastore failure');\r\n            ..\r\n        };\r\n```\r\n####dropstoreDatastoreManager.DatastoreListChanged Event\r\ndropstore-ng allows you to easily subscribe and unsubscribe from dropbox.js events, and ensure that your $scope is updated properly.\r\n\r\n```js\r\n    //to subscribe to changes..\r\n    var ptr = datastoreManager.SubscribeDatastoreListChanged(function(datastoreListids){\r\n        for(var ndx in datastoreListids){\r\n            console.log(datastoreListids[ndx]);\r\n            $scope.ids = datastoreListids;\r\n        }\r\n    });\r\n\r\n    //and to unsubscribe\r\n    datastoreManager.UnsubscribeDatastoreListChanged(ptr);\r\n\r\n```\r\n\r\n\r\n###Dropbox Datastore\r\n-----------\r\nAll unmentioned instance methods for the standard Dropbox.Datastore are transparently aliased. Only wrapped/changed functionality  methods are documented here. Refer to\r\n[Dropbox SDK Documentation for Dropbox.Datastore](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Datastore) for more information.\r\n\r\n\r\n####dropstoreDatastore.SyncStatusChanged  Event\r\ndropstore-ng allows you to easily subscribe and unsubscribe from dropbox.js events, and ensure that your $scope is updated properly.\r\n\r\n```js\r\n    //to subscribe to all record changes..\r\n    var ptr = datastore.SubscribeSyncStatusChanged (function(){\r\n        console.log('sync status changed');\r\n    });\r\n\r\n    //and to unsubscribe\r\n    datastore.UnsubscribeSyncStatusChanged (ptr);\r\n```\r\n\r\n####dropstoreDatastore.RecordsChanged Event\r\ndropstore-ng allows you to easily subscribe and unsubscribe from dropbox.js events, and ensure that your $scope is updated properly.\r\nThe `SubscribeRecordsChanged` method also takes a optional secondary parameter `tableid` that automatically retrieves the records that changed for a specific table.\r\n\r\n```js\r\n    //to subscribe to all record changes..\r\n    var ptr = datastore.SubscribeRecordsChanged(function(event){\r\n        var records = event.affectedRecordsForTable('tasks');\r\n        for(var ndx in records){\r\n            console.log(records[ndx].get('taskname'));\r\n            $scope.tasks.push(records[ndx]);\r\n        }\r\n    });\r\n\r\n    //with optional tableid parameter\r\n    var ptr = datastore.SubscribeRecordsChanged(function(records){\r\n        for(var ndx in records){\r\n            console.log(records[ndx].get('taskname'));\r\n            $scope.tasks.push(records[ndx]);\r\n        }\r\n    }, 'tasks');\r\n\r\n    //and to unsubscribe\r\n    datastore.UnsubscribeRecordsChanged(ptr);\r\n```\r\n\r\n\r\nTODO\r\n-----------\r\n- [Dropbox.Client](https://www.dropbox.com/developers/datastore/docs/js#Dropbox.Client) has many methods. Currently only the methods directly related to account information or authentication are handled, other file related instance methods should be coming shortly.\r\n- Tests for the dropstore-ng framework are coming shortly.\r\n\r\nPull Requests\r\n-----------\r\nTo make a pull request, please do the following:\r\n\r\nMention what specific version of dropbox.js and dropstore-ng.js you were using when you encountered the issue/added the feature. This can be accessed by looking at the dropstore-ng.js file header.\r\nProvide a pastie or gist that demonstrates the bug/feature\r\nDo not modify the version header. I will modify that manually when merging the request\r\n\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2013 Jason Kulatunga, released under the [MIT license](http://analogj.mit-license.org/)\r\n",
  "readmeFilename": "README.md",
  "_id": "dropstore-ng@1.0.4",
  "description": "dropstore-ng\r ============",
  "repository": {
    "type": "git",
    "url": "git://github.com/AnalogJ/dropstore-ng.git"
  }
}